{"ast":null,"code":"import { BUY_ITEM, UPDATE_ITEM } from \"../constants/actionType\";\nimport { LOCAL_STORAGE_NAME } from \"../constants/localStorageName\";\n\n//CHƯA MUA HÀNG\nlet inititalState = [];\n//ĐÃ MUA HÀNG (tồn tại trong localStorage) -> lấy từ localStorage\nconst shoppingCartLocal = JSON.parse(localStorage.getItem(LOCAL_STORAGE_NAME));\n//khởi tạo state quản lý giỏ hàng\ninititalState = shoppingCartLocal != null && shoppingCartLocal.length >= 0 ? shoppingCartLocal : [];\n\n// HÀM KIỂM TRA SẢN PHẨM ĐÃ CÓ TRONG GIỎ  HÀNG HAY CHƯA\nconst getIndexByProductInCart = (listProductInCart, product) => {\n  for (let index = 0; index < listProductInCart.length; index++) {\n    if (listProductInCart[index].product.productId === product.productId) {\n      return index; //sản phẩm đã có trong giỏ hàng\n    }\n  }\n\n  return -1;\n};\n\n//tạo reducers \nconst cart = (state = inititalState, action) => {\n  //lấy sản phẩm và số lượng mua từ action \n  let {\n    product,\n    quantity,\n    type\n  } = action;\n  let item = {\n    product,\n    quantity\n  };\n  switch (type) {\n    case BUY_ITEM:\n      //chức năng mua hàng\n      if (state === 0) {\n        //khách hàng chưa mua hàng, chưa có sản phẩm trong giỏ hàng ([]);\n        // -> thêm sản phẩm vào giỏ hàng\n        state.push(item);\n      } else {\n        //khách hàng dã mua hàng -> giỏ ahngf đã tồn tại\n        // TH1: sản phẩm đã có trong giỏ hàng -> thì tăng số lượng mua\n        let index = getIndexByProductInCart(state, product);\n        if (index >= 0) {\n          // nếu sản phẩm đã tồn tại trong giỏ hàng => cập nhập số lượng\n          state[index].quantity = parseInt(state[index].quantity) + parseInt(quantity);\n        } else {\n          //TH2: sản phẩm mua chưa có trong giỏ ahngf -> thêm sản phẩm vào giỏ hàng\n          state.push(item);\n        }\n      }\n      // cập nhập lại localStorage giỏ hàng\n      localStorage.setItem(LOCAL_STORAGE_NAME, JSON.stringify(state));\n      return [...state];\n    //trả về 1 state mới\n\n    //Cập nhập giỏ hàng\n    case UPDATE_ITEM:\n      //tìm kiếm sản phẩm trong giỏ hàng để cập nhập số lượng\n      let index = getIndexByProductInCart(state, product);\n      if (index >= 0) {\n        state[index].quantity = parseInt(item.quantity);\n      }\n    //cập nhập localStora\n    default:\n      return state;\n  }\n};\nexport default cart;","map":{"version":3,"names":["BUY_ITEM","UPDATE_ITEM","LOCAL_STORAGE_NAME","inititalState","shoppingCartLocal","JSON","parse","localStorage","getItem","length","getIndexByProductInCart","listProductInCart","product","index","productId","cart","state","action","quantity","type","item","push","parseInt","setItem","stringify"],"sources":["C:/DEV/ReactJs/lesson14/shopping-cart-redux/src/reducers/cart.js"],"sourcesContent":["import { BUY_ITEM, UPDATE_ITEM } from \"../constants/actionType\";\r\nimport { LOCAL_STORAGE_NAME } from \"../constants/localStorageName\";\r\n\r\n//CHƯA MUA HÀNG\r\nlet inititalState = [];\r\n//ĐÃ MUA HÀNG (tồn tại trong localStorage) -> lấy từ localStorage\r\nconst shoppingCartLocal = JSON.parse(localStorage.getItem(LOCAL_STORAGE_NAME));\r\n//khởi tạo state quản lý giỏ hàng\r\ninititalState = (shoppingCartLocal != null && shoppingCartLocal.length >= 0) ? shoppingCartLocal : [];\r\n\r\n\r\n// HÀM KIỂM TRA SẢN PHẨM ĐÃ CÓ TRONG GIỎ  HÀNG HAY CHƯA\r\nconst getIndexByProductInCart = (listProductInCart, product) => {\r\n    for (let index = 0; index < listProductInCart.length; index++) {\r\n        if (listProductInCart[index].product.productId === product.productId) {\r\n            return index; //sản phẩm đã có trong giỏ hàng\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n//tạo reducers \r\nconst cart = (state = inititalState, action) => {\r\n    //lấy sản phẩm và số lượng mua từ action \r\n    let { product, quantity, type } = action;\r\n    let item = { product, quantity };\r\n\r\n    switch (type) {\r\n        case BUY_ITEM:\r\n            //chức năng mua hàng\r\n            if (state === 0) {\r\n                //khách hàng chưa mua hàng, chưa có sản phẩm trong giỏ hàng ([]);\r\n                // -> thêm sản phẩm vào giỏ hàng\r\n                state.push(item);\r\n            } else {\r\n                //khách hàng dã mua hàng -> giỏ ahngf đã tồn tại\r\n                // TH1: sản phẩm đã có trong giỏ hàng -> thì tăng số lượng mua\r\n                let index = getIndexByProductInCart(state, product);\r\n                if (index >= 0) {\r\n                    // nếu sản phẩm đã tồn tại trong giỏ hàng => cập nhập số lượng\r\n                    state[index].quantity = parseInt(state[index].quantity) + parseInt(quantity);\r\n                } else { //TH2: sản phẩm mua chưa có trong giỏ ahngf -> thêm sản phẩm vào giỏ hàng\r\n                    state.push(item);\r\n                }\r\n            }\r\n            // cập nhập lại localStorage giỏ hàng\r\n            localStorage.setItem(LOCAL_STORAGE_NAME, JSON.stringify(state));\r\n            return [...state]; //trả về 1 state mới\r\n\r\n        //Cập nhập giỏ hàng\r\n        case UPDATE_ITEM:\r\n            //tìm kiếm sản phẩm trong giỏ hàng để cập nhập số lượng\r\n            let index=getIndexByProductInCart(state,product);\r\n            if(index>=0){\r\n                state[index].quantity= parseInt(item.quantity);\r\n            }\r\n            //cập nhập localStora\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default cart;\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,yBAAyB;AAC/D,SAASC,kBAAkB,QAAQ,+BAA+B;;AAElE;AACA,IAAIC,aAAa,GAAG,EAAE;AACtB;AACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,kBAAkB,CAAC,CAAC;AAC9E;AACAC,aAAa,GAAIC,iBAAiB,IAAI,IAAI,IAAIA,iBAAiB,CAACK,MAAM,IAAI,CAAC,GAAIL,iBAAiB,GAAG,EAAE;;AAGrG;AACA,MAAMM,uBAAuB,GAAGA,CAACC,iBAAiB,EAAEC,OAAO,KAAK;EAC5D,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,iBAAiB,CAACF,MAAM,EAAEI,KAAK,EAAE,EAAE;IAC3D,IAAIF,iBAAiB,CAACE,KAAK,CAAC,CAACD,OAAO,CAACE,SAAS,KAAKF,OAAO,CAACE,SAAS,EAAE;MAClE,OAAOD,KAAK,CAAC,CAAC;IAClB;EACJ;;EACA,OAAO,CAAC,CAAC;AACb,CAAC;;AAED;AACA,MAAME,IAAI,GAAGA,CAACC,KAAK,GAAGb,aAAa,EAAEc,MAAM,KAAK;EAC5C;EACA,IAAI;IAAEL,OAAO;IAAEM,QAAQ;IAAEC;EAAK,CAAC,GAAGF,MAAM;EACxC,IAAIG,IAAI,GAAG;IAAER,OAAO;IAAEM;EAAS,CAAC;EAEhC,QAAQC,IAAI;IACR,KAAKnB,QAAQ;MACT;MACA,IAAIgB,KAAK,KAAK,CAAC,EAAE;QACb;QACA;QACAA,KAAK,CAACK,IAAI,CAACD,IAAI,CAAC;MACpB,CAAC,MAAM;QACH;QACA;QACA,IAAIP,KAAK,GAAGH,uBAAuB,CAACM,KAAK,EAAEJ,OAAO,CAAC;QACnD,IAAIC,KAAK,IAAI,CAAC,EAAE;UACZ;UACAG,KAAK,CAACH,KAAK,CAAC,CAACK,QAAQ,GAAGI,QAAQ,CAACN,KAAK,CAACH,KAAK,CAAC,CAACK,QAAQ,CAAC,GAAGI,QAAQ,CAACJ,QAAQ,CAAC;QAChF,CAAC,MAAM;UAAE;UACLF,KAAK,CAACK,IAAI,CAACD,IAAI,CAAC;QACpB;MACJ;MACA;MACAb,YAAY,CAACgB,OAAO,CAACrB,kBAAkB,EAAEG,IAAI,CAACmB,SAAS,CAACR,KAAK,CAAC,CAAC;MAC/D,OAAO,CAAC,GAAGA,KAAK,CAAC;IAAE;;IAEvB;IACA,KAAKf,WAAW;MACZ;MACA,IAAIY,KAAK,GAACH,uBAAuB,CAACM,KAAK,EAACJ,OAAO,CAAC;MAChD,IAAGC,KAAK,IAAE,CAAC,EAAC;QACRG,KAAK,CAACH,KAAK,CAAC,CAACK,QAAQ,GAAEI,QAAQ,CAACF,IAAI,CAACF,QAAQ,CAAC;MAClD;IACA;IACJ;MACI,OAAOF,KAAK;EACpB;AACJ,CAAC;AACD,eAAeD,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}